{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template with VPC, Subnet, LoadBalancer, Autoscaling, RDS and an Instance with LAMP stack installed",
    "Parameters": {
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance.",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "DBInstanceClass": {
            "AllowedValues": [
                "db.t2.micro"
            ],
            "ConstraintDescription": "must select a valid database instance type.",
            "Default": "db.t2.micro",
            "Description": "The database instance type",
            "Type": "String"
        },
        "DBName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "MyDB",
            "Description": "MySQL database name",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        },
        "DBPassword": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "Description": "Password for MySQL database access",
            "MaxLength": "41",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "DBRootPassword": {
            "NoEcho": "true",
            "Description": "Root password for MySQL",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBUser": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Description": "Username for MySQL database access",
            "MaxLength": "16",
            "MinLength": "1",
            "NoEcho": "true",
            "Type": "String"
        },
        "DBAllocatedStorage": {
            "ConstraintDescription": "must be between 20 and 25Gb.",
            "Default": "20",
            "Description": "The size of the database (Gb)",
            "MaxValue": "25",
            "MinValue": "20",
            "Type": "Number"
        },
        "SSHLocation": {
            "Description": " The IP address range that can be used access the web server using SSH ",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t2.micro": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-west-2": {
                "HVM64": "ami-bf5540df"
            },
            "us-west-1": {
                "HVM64": "ami-bf5540df"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": "10.0.0.0/20"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3e39c24a-1034-4488-b15d-7e7e57f93a3b"
                }
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.0.0/25",
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9a52d1bd-1e23-4187-9cb8-b7884644718c"
                }
            }
        },
        "MyDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": {
                    "Ref": "DBName"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "Engine": "MySQL",
                "EngineVersion": "5.5",
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                }
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MinSize": "2",
                "MaxSize": "2",
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a0c351c2-d011-4c8e-9e00-a8407a1ec926"
                }
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": "true",
                "Subnets": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "LBCookieStickinessPolicy": [
                    {
                        "PolicyName": "CookieBasedPolicy",
                        "CookieExpirationPeriod": "30"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "CookieBasedPolicy"
                        ]
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:80/",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "5",
                    "Interval": "10",
                    "Timeout": "5"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "13755149-49fd-4a9e-bd87-68f85a4c84a8"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fe30cabd-ebb9-47af-b0fb-c8d2db7a1d14"
                }
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7a8d9a42-10ec-45f6-827b-27dc7caf1bd1"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b4594eb2-5589-4d18-8f68-e618ef5485c9"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "VPCGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b66c663d-5d60-4aa4-bf78-79a54c056cd2"
                }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b9173c53-e93b-4e15-951e-2c53e08b8236"
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Allow access from HTTP and SSH traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "96b806b5-9640-499c-ab2b-320f692e9212"
                }
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ]
            }
        },
        "WebServerInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "InstallAndRun": [
                            "Install",
                            "Configure"
                        ]
                    },
                    "Install": {
                        "packages": {
                            "yum": {
                                "mysql": [],
                                "mysql-server": [],
                                "mysql-libs": [],
                                "httpd": [],
                                "php": [],
                                "php-mysql": []
                            }
                        },
                        "files": {
                            "/var/www/html/index.php": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<html>\n",
                                            "  <head>\n",
                                            "    <title>AWS CloudFormation PHP Sample</title>\n",
                                            "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                                            "  </head>\n",
                                            "  <body>\n",
                                            "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                                            "    <p/>\n",
                                            "    <?php\n",
                                            "      // Print out the current data and time\n",
                                            "      print \"The Current Date and Time is: <br/>\";\n",
                                            "      print date(\"g:i A l, F j Y.\");\n",
                                            "    ?>\n",
                                            "    <p/>\n",
                                            "    <?php\n",
                                            "      // Setup a handle for CURL\n",
                                            "      $curl_handle=curl_init();\n",
                                            "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                                            "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                                            "      // Get the hostname of the intance from the instance metadata\n",
                                            "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                                            "      $hostname = curl_exec($curl_handle);\n",
                                            "      if (empty($hostname))\n",
                                            "      {\n",
                                            "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                                            "      }\n",
                                            "      else\n",
                                            "      {\n",
                                            "        print \"Server = \" . $hostname . \"<br />\";\n",
                                            "      }\n",
                                            "      // Get the instance-id of the intance from the instance metadata\n",
                                            "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                                            "      $instanceid = curl_exec($curl_handle);\n",
                                            "      if (empty($instanceid))\n",
                                            "      {\n",
                                            "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                                            "      }\n",
                                            "      else\n",
                                            "      {\n",
                                            "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                                            "      }\n",
                                            "      $Database   = \"localhost\";\n",
                                            "      $DBUser     = \"",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "\";\n",
                                            "      $DBPassword = \"",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "\";\n",
                                            "      print \"Database = \" . $Database . \"<br />\";\n",
                                            "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n",
                                            "                      or die(\"Could not connect: \" . mysql_error());\n",
                                            "      print (\"Connected to $Database successfully\");\n",
                                            "      mysql_close($dbconnection);\n",
                                            "    ?>\n",
                                            "    <h2>PHP Information</h2>\n",
                                            "    <p/>\n",
                                            "    <?php\n",
                                            "      phpinfo();\n",
                                            "    ?>\n",
                                            "  </body>\n",
                                            "</html>\n"
                                        ]
                                    ]
                                },
                                "mode": "000600",
                                "owner": "apache",
                                "group": "apache"
                            },
                            "/tmp/setup.mysql": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "CREATE DATABASE ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            ";\n",
                                            "GRANT ALL ON ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            ".* TO '",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "'@localhost IDENTIFIED BY '",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "';\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource WebServerInstance ",
                                            "         --configsets InstallAndRun ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "mysqld": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "Configure": {
                        "commands": {
                            "01_set_mysql_root_password": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "mysqladmin -u root password '",
                                            {
                                                "Ref": "DBRootPassword"
                                            },
                                            "'"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$(mysql ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            " -u root --password='",
                                            {
                                                "Ref": "DBRootPassword"
                                            },
                                            "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
                                        ]
                                    ]
                                }
                            },
                            "02_create_database": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "mysql -u root --password='",
                                            {
                                                "Ref": "DBRootPassword"
                                            },
                                            "' < /tmp/setup.mysql"
                                        ]
                                    ]
                                },
                                "test": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "$(mysql ",
                                            {
                                                "Ref": "DBName"
                                            },
                                            " -u root --password='",
                                            {
                                                "Ref": "DBRootPassword"
                                            },
                                            "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "WebServerSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "PublicSubnet"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerInstance ",
                                "         --configsets InstallAndRun ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerInstance ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Description": "URL for newly created LAMP stack",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "WebServerInstance",
                                "PublicDnsName"
                            ]
                        }
                    ]
                ]
            }
        }
    }
}